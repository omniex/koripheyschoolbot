from aiogram import Router
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove
from aiogram import Router, F

from src.Utils.database_methods import *
from src.Utils.keyboards import *
from src.Utils.messages import USERS_MENU_MESSAGE, START_MESSAGE_NOT_REGISTERED, START_MESSAGE_REGISTERED
from src.routers.commands.admin_commands import send_for_needed_users

router = Router(name=__name__)


class News(StatesGroup):
    for_who = State()
    news_text = State()


class Announcement(StatesGroup):
    for_who = State()
    wait_text = State()


@router.message(CommandStart(), F.from_user.id.in_(settings.council_ids))
async def handle_start(msg: types.Message, state: FSMContext):
    await state.clear()
    registered = await is_registered(msg)
    if registered:
        await msg.answer(START_MESSAGE_REGISTERED, reply_markup=ReplyKeyboardRemove())
        await handle_menu(msg)
    else:
        await msg.answer(START_MESSAGE_NOT_REGISTERED, reply_markup=ReplyKeyboardRemove())


@router.message(Command('menu'), F.from_user.id.in_(settings.council_ids))
async def handle_menu(msg: types.Message):
    await msg.answer(USERS_MENU_MESSAGE, reply_markup=await get_council_menu(msg.from_user.id),
                     parse_mode=ParseMode.MARKDOWN)


@router.message(Command('create_news'), F.from_user.id.in_(settings.council_ids))
async def handle_create_news(msg: types.Message, state: FSMContext):
    await msg.answer('–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!')
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –∫–æ–≥–æ —ç—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å', reply_markup=await get_for_who_is_announcement_council())
    await state.set_state(News.for_who)


@router.message(News.for_who)
async def handle_for_who(msg: types.Message, state: FSMContext):
    await state.update_data(who=msg.text)
    data = await state.get_data()
    await msg.answer(f'–•–æ—Ä–æ—à–æ, —Ç–æ–ª—å–∫–æ "{data["who"]}" —É–≤–∏–¥–∏—Ç(-—è—Ç) —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–∞–º–æ–π –Ω–æ–≤–æ—Å—Ç–∏',
                     reply_markup=ReplyKeyboardRemove())
    await state.set_state(News.news_text)


@router.message(News.news_text)
async def handle_news_text(msg: types.Message, state: FSMContext):
    await state.update_data(information=msg.text)
    data = await state.get_data()
    for_who = await get_ids_for_send(data)
    await register_news(data)
    for user in for_who:
        await msg.bot.send_message(user, f'*–í–ù–ò–ú–ê–ù–ò–ï –ù–û–í–û–°–¢–¨*', parse_mode=ParseMode.MARKDOWN)
        await msg.copy_to(user, reply_markup=ReplyKeyboardRemove())
    await msg.answer('–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!')
    await state.clear()


@router.message(Command('announcement'), F.from_user.id.in_(settings.council_ids))
async def handle_admin_announcement(msg: types.Message, state: FSMContext):
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ',
                     reply_markup=await get_for_who_is_announcement_council())
    await state.set_state(Announcement.for_who)


@router.message(Announcement.for_who)
async def handle_what_announcement(msg: types.Message, state: FSMContext):
    await state.update_data(who=msg.text)
    data = await state.get_data()
    await msg.answer(
        f'–•–æ—Ä–æ—à–æ, —Ç–æ–ª—å–∫–æ "{data["who"]}" —É–≤–∏–¥–∏—Ç(-—è—Ç) —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–∞–º–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è',
        reply_markup=ReplyKeyboardRemove())
    await state.set_state(Announcement.wait_text)


@router.message(Announcement.wait_text)
async def handle_announcement_text(msg: types.Message, state: FSMContext):
    await state.update_data(text=msg.text)
    data = await state.get_data()
    if data['who'] == 'ü´Ç–°–æ–≤–µ—Ç –ì–∏–º–Ω–∞–∑–∏—Å—Ç–æ–≤':
        await send_for_needed_users(msg, settings.council_ids, state)
    elif data['who'] == 'üë∏–£—á–∏—Ç–µ–ª—è':
        await send_for_needed_users(msg, settings.teacher_ids, state)
    elif data['who'] == '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
        await send_for_needed_users(msg, settings.user_ids, state)
    else:
        await state.clear()
