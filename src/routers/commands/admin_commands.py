import asyncio
import os

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile, ReplyKeyboardRemove

from src.Utils.database_methods import *
from src.Utils.messages import ADMIN_MENU_MESSAGE
from src.config import settings

from src.Utils.keyboards import *

router = Router(name=__name__)


class Search_class(StatesGroup):
    search_name = State()


class FoodSurvey(StatesGroup):
    waiting_for_answer = State()
    what_meal = State()
    meal = ''
    need = 0
    msg_con: types.Message
    state_con: FSMContext


class Announcement(StatesGroup):
    for_who = State()
    wait_text = State()


class SearchUser(StatesGroup):
    search_name = State()


@router.message(Command('admin'), F.from_user.id.in_(settings.user_ids))
async def handle_menu(msg: types.Message):
    await msg.answer(ADMIN_MENU_MESSAGE, parse_mode=ParseMode.MARKDOWN,
                     reply_markup=await get_admin_menu(msg.from_user.id))


@router.message(Command('users'), F.from_user.id.in_(settings.admin_ids))
async def handle_user_list(msg: types.Message):
    await msg.reply('Hello admin')
    await msg.answer('Here is the list of all users: ')
    all_users = await get_all('users', 'USERS')
    users_info = ''
    for user in all_users:
        users_info += f'UID: {user[0]}\nName: {user[1]}\nSurname: {user[2]}\nGrade: {user[3]}\nPhone number: {user[4]}\nTelegram name: {user[5]}\nUsername: @{user[6]}\nId: {user[7]}\nRole: {user[8]}\n\n'
    if users_info == '':
        await msg.answer('Nothing in database', reply_markup=ReplyKeyboardRemove())
    else:
        await msg.answer(users_info, reply_markup=ReplyKeyboardRemove())


@router.message(Command('database_exec'), F.from_user.id.in_(settings.admin_ids))
async def handle_database(msg: types.Message):
    args = msg.text.split()
    if len(args) < 3:
        await msg.answer('Command using: /database_exec <database name> <command>', reply_markup=ReplyKeyboardRemove())
        return
    ind = len(f'{args[0]} {args[1]}')
    await msg.answer(f'Trying to execute command: {msg.text[ind:]}', reply_markup=ReplyKeyboardRemove())
    try:
        await execute_command(msg.text[ind:], args[1])
    except Exception as e:
        await msg.answer(str(e))


@router.message(Command('database_get'), F.from_user.id.in_(settings.admin_ids))
async def handle_database(msg: types.Message):
    args = msg.text.split()
    if len(args) < 3:
        await msg.answer('Command using: /database_get <database name> <command>', reply_markup=ReplyKeyboardRemove())
        return
    ind = len(f'{args[0]} {args[1]}')
    await msg.answer(f'Trying to execute command: {msg.text[ind:]}', reply_markup=ReplyKeyboardRemove())
    try:
        data = await get_command(msg.text[ind:], args[1])
        await msg.answer(f'Raw data: \n{data}')
    except Exception as e:
        await msg.answer(str(e))


@router.message(Command('search'), F.from_user.id.in_(settings.admin_ids))
async def search_user(msg: types.Message, state: FSMContext):
    # args = msg.text.split()
    # if len(args) > 1:
    #     await msg.answer('Command using: /search')
    #     return
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è/—Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=ReplyKeyboardRemove())
    await state.set_state(SearchUser.search_name)


@router.message(SearchUser.search_name)
async def search_for_user(msg: types.Message, state: FSMContext):
    name = msg.text
    data = await search_for_direct_data('users', 'USERS', name)
    await msg.answer(f'–í–æ—Ç, —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:')
    for user in data:
        users_info = ''
        users_info += f'UID: {user[0]}\nName: {user[1]}\nSurname: {user[2]}\nGrade: {user[3]}\nPhone number: {user[4]}\nTelegram name: {user[5]}\nUsername: @{user[6]}\nId: {user[7]}\n\n'
        await msg.answer(users_info)


#old method of search
# @router.message(Search_class.search_name)
# async def handle_name(msg: types.Message, state: FSMContext):
#     name = msg.text
#     data = search_for_direct_data('users', 'USERS'name)
#     await msg.answer(f'–í–æ—Ç, —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:')
#     for user in data:
#         users_info = ''
#         users_info += f'UID: {user[0]}\nName: {user[1]}\nSurname: {user[2]}\nGrade: {user[3]}\nPhone number: {user[4]}\nTelegram name: {user[5]}\nUsername: @{user[6]}\nId: {user[7]}\n'
#         await msg.answer(users_info)
#     await state.clear()


@router.message(Command('food'), F.from_user.id.in_(settings.admin_ids))
async def handle_food(msg: types.Message, state: FSMContext):
    await create_db_food()
    arr = msg.text.split()

    if len(arr) < 2 or not arr[1].isdigit():
        await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /food <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>", reply_markup=ReplyKeyboardRemove())
        return

    FoodSurvey.need = int(arr[1])
    FoodSurvey.msg_con = msg
    FoodSurvey.state_con = state

    await msg.answer("–ö–∞–∫–æ–π —ç—Ç–æ –ø—Ä–∏—ë–º –ø–∏—â–∏?", reply_markup=await get_meal())
    await state.set_state(FoodSurvey.what_meal)


@router.message(FoodSurvey.what_meal)
async def handle_meal(msg: types.Message, state: FSMContext):
    await msg.answer(f'–ù–∞—á–∏–Ω–∞—é –æ–ø—Ä–æ—Å –∏–∑ {FoodSurvey.need} –≤–æ–ø—Ä–æ—Å–æ–≤.')
    await state.update_data(remaining=FoodSurvey.need, good=0, bad=0, meal=msg.text)
    await ask_question(FoodSurvey.msg_con, FoodSurvey.state_con)


async def ask_question(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    remaining = data.get("remaining", 0)

    if remaining <= 0:
        good = data.get("good", 0)
        bad = data.get("bad", 0)
        meal = data.get("meal", 'None')
        await msg.answer(
            f'–ü—Ä–∏—ë–º –ø–∏—â–∏: {meal}\n–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {good + bad}\n–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è: {good / (good + bad) * 100}%\n‚úÖ –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: {good}\n‚ùå –ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å: {bad}', reply_markup=ReplyKeyboardRemove())
        await register_meal(data)
        await state.clear()
        return

    await msg.answer(f'–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Ç–≤–µ—Ç - {remaining}', reply_markup=await get_food_marks())
    await state.set_state(FoodSurvey.waiting_for_answer)


@router.message(FoodSurvey.waiting_for_answer)
async def handle_answer(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    remaining = data.get("remaining", 0)
    good = data.get("good", 0)
    bad = data.get("bad", 0)

    if msg.text == '‚úÖ–ú–Ω–µ –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å':
        good += 1
    elif msg.text == '‚ùå–ú–Ω–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å':
        bad += 1
    elif msg.text == '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å':
        await state.update_data(remaining=0, good=good, bad=bad)
        await ask_question(msg, state)
        return
    else:
        await msg.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return

    await state.update_data(remaining=remaining - 1, good=good, bad=bad)
    await ask_question(msg, state)


@router.message(Command('export_excel'), F.from_user.id.in_(settings.admin_ids))
async def handle_excel(msg: types.Message, state: FSMContext):
    args = msg.text.split()
    if len(args) != 3:
        await msg.answer('Command using: /export_excel <database name> <table name>', reply_markup=ReplyKeyboardRemove())
        return
    try:
        await export_to_excel(args[1], args[2])
        await msg.answer_document(FSInputFile(f'{args[2]}.xlsx'))
        os.remove(f'{args[2]}.xlsx')
    except Exception as e:
        print(e)


@router.message(Command('change_role'), F.from_user.id.in_(settings.admin_ids))
async def handle_changing_role(msg: types.Message):
    args = msg.text.split()
    if len(args) != 3:
        await msg.answer('Command using: /change_role <user_id> <new_role>', reply_markup=ReplyKeyboardRemove())
        return

    if args[2] == 'admin':
        await msg.answer('Nobody can give admin role, you need to add it manually in code', reply_markup=ReplyKeyboardRemove())

    try:
        await change_role(int(args[1]), args[2], msg)
    except Exception as e:
        print(e)


@router.message(Command('change_status'), F.from_user.id.in_(settings.admin_ids))
async def handle_changing_role(msg: types.Message):
    args = msg.text.split()
    if len(args) != 3:
        await msg.answer('Command using: /change_status <user_id> <new_status (approved, rejected, pending)>', reply_markup=ReplyKeyboardRemove())
        return

    try:
        await change_status(int(args[1]), args[2], msg)
    except Exception as e:
        print(e)


@router.message(Command('announcement'), F.from_user.id.in_(settings.admin_ids))
async def handle_admin_announcement(msg: types.Message, state: FSMContext):
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', reply_markup=await get_for_who_is_announcement())
    await state.set_state(Announcement.for_who)


@router.message(Announcement.for_who)
async def handle_what_announcement(msg: types.Message, state: FSMContext):
    await state.update_data(who=msg.text)
    data = await state.get_data()
    await msg.answer(
        f'–•–æ—Ä–æ—à–æ, —Ç–æ–ª—å–∫–æ "{data["who"]}" —É–≤–∏–¥–∏—Ç(-—è—Ç) —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–∞–º–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è', reply_markup=ReplyKeyboardRemove())
    await state.set_state(Announcement.wait_text)


@router.message(Announcement.wait_text)
async def handle_announcement_text(msg: types.Message, state: FSMContext):
    await state.update_data(text=msg.text)
    data = await state.get_data()
    if data['who'] == 'ü•∑–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è':
        await send_for_needed_users(data["text"], msg, settings.admin_ids, state)
    elif data['who'] == 'ü´Ç–°–æ–≤–µ—Ç –ì–∏–º–Ω–∞–∑–∏—Å—Ç–æ–≤':
        await send_for_needed_users(data["text"], msg, settings.council_ids, state)
    elif data['who'] == 'üë∏–£—á–∏—Ç–µ–ª—è':
        await send_for_needed_users(data["text"], msg, settings.teacher_ids, state)
    elif data['who'] == '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
        await send_for_needed_users(data["text"], msg, settings.user_ids, state)
    else:
        await state.clear()


async def send_for_needed_users(msg: types.Message, user_list, state: FSMContext):
    for user in user_list:
        try:
            await msg.copy_to(chat_id=user, reply_markup=ReplyKeyboardRemove())  # –ö–æ–ø–∏—Ä—É–µ—Ç –í–°–Å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç. –¥.)
        except Exception as e:
            await msg.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}", reply_markup=ReplyKeyboardRemove())
        await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏–º–∏—Ç–æ–≤ Telegram

    await msg.answer('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
    await state.clear()


@router.message(Command('approve'), F.from_user.id.in_(settings.admin_ids))
async def handle_approve(msg: types.Message, state: FSMContext):
    args = msg.split()
    if len(args) != 2 or not args[1].isdigit():
        await msg.answer('Command using: /approve <user_id>', reply_markup=ReplyKeyboardRemove())
        return
    await change_status(int(args[1]), 'approved', msg)


@router.message(Command('reject'), F.from_user.id.in_(settings.admin_ids))
async def handle_reject(msg: types.Message, state: FSMContext):
    args = msg.split()
    if len(args) != 2 or not args[1].isdigit():
        await msg.answer('Command using: /reject <user_id>', reply_markup=ReplyKeyboardRemove())
        return
    await change_status(int(args[1]), 'rejected', msg)


@router.message(Command('change_ticket_status'), F.from_user.id.in_(settings.admin_ids))
async def handle_approve(msg: types.Message, state: FSMContext):
    args = msg.split()
    if len(args) != 3 or not args[1].isdigit():
        await msg.answer('Command using: /change_ticket_status <ticket_id ({user_id}_{ticket_num})> <status (new, in work, completed, not_completed)>', reply_markup=ReplyKeyboardRemove())
        return
    if args[2] == 'not_completed':
        await change_status_ticket(args[1], 'not completed', msg)
    else:
        await change_status_ticket(args[1], args[2], msg)


@router.message(Command('reports'), F.from_user.id.in_(settings.admin_ids))
async def handle_reports(msg: types.Message):
    data = await get_all('tickets', 'TICKETS')
    await msg.answer(f'–í–æ—Ç, —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:', reply_markup=ReplyKeyboardRemove())
    for ticket in data:
        if ticket[6] == 'not completed' or ticket[6] == 'in work':
            ticket_info = ''
            ticket_info += f'UID: {ticket[0]}\nticket_id: {ticket[1]}\n–ò–º—è: {ticket[2]}\nTG ID: {ticket[3]}\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {ticket[4]}\n–ö–∞–±–∏–Ω–µ—Ç: {ticket[5]}\n–°—Ç–∞—Ç—É—Å: {ticket[6]}\n'
            await msg.answer(ticket_info, reply_markup=await completed_or_not(ticket_id=ticket[1]))
