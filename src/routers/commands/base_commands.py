from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove

from src.Utils.database_methods import *
from src.Utils.keyboards import *
from src.Utils.messages import *
from src.config import settings

router = Router(name=__name__)


class NoteForm(StatesGroup):
    text = State()
    interval = State()


class ReportForm(StatesGroup):
    get_text = State()
    get_room = State()


class IdeaForm(StatesGroup):
    get_text = State()


NEWS_PER_PAGE = 3


@router.message(F.from_user.id.in_(settings.pending_users))
async def handle_pending(msg: types.Message):
    if msg.from_user.id in settings.admin_ids:
        await change_status(msg.from_user.id, 'approved', msg)
        await msg.answer(
            '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã!', reply_markup=ReplyKeyboardRemove())
        return
        # settings.pending_users.discard(msg.from_user.id)
        # settings.approved_users.add(msg.from_user.id)
    await msg.answer('–ü–æ–∫–∞ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –Ω–æ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!', reply_markup=ReplyKeyboardRemove())


@router.message(F.from_user.id.in_(settings.rejected_users))
async def handle_pending_or_banned(msg: types.Message):
    if msg.from_user.id in settings.admin_ids:
        await change_status(msg.from_user.id, 'approved', msg)
        await msg.answer(
            '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã '
            '–≤—Å–µ –∫–æ–º–∞–Ω–¥—ã!', reply_markup=ReplyKeyboardRemove())
        return
    await msg.answer(
        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–π–¥–∏—Ç–µ –ª–∏—á–Ω–æ –∫ –æ–¥–Ω–æ–º—É –∏–∑ '
        '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –æ—à–∏–±–∫–∞!', reply_markup=ReplyKeyboardRemove())


@router.message(F.from_user.id.in_(settings.banned_ids))
async def handle_pending_or_banned(msg: types.Message):
    await msg.answer(
            '–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤! –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω!', reply_markup=ReplyKeyboardRemove())


@router.message(CommandStart())
async def handle_start(msg: types.Message, state: FSMContext):
    await state.clear()
    registered = await is_registered(msg)
    if registered:
        await msg.answer(START_MESSAGE_REGISTERED, reply_markup=ReplyKeyboardRemove())
        await handle_menu(msg)
    else:
        await msg.answer(START_MESSAGE_NOT_REGISTERED, reply_markup=ReplyKeyboardRemove())


@router.message(Command('cancel'))
async def handel_cancel(msg: types.Message, state: FSMContext):
    await msg.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=ReplyKeyboardRemove())
    await state.clear()


@router.message(Command('menu'), F.from_user.id.in_(settings.user_ids))
async def handle_menu(msg: types.Message):
    await msg.answer(USERS_MENU_MESSAGE, reply_markup=await get_user_menu(msg.from_user.id), parse_mode=ParseMode.MARKDOWN)


@router.message(Command('news'))
async def handle_news(msg: types.Message, user_id: int = None):
    if user_id is None:
        user_id = msg.from_user.id
    await msg.answer('–°–µ–π—á–∞—Å —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!', reply_markup=ReplyKeyboardRemove())
    news = await get_all('news', 'NEWS')
    if len(news) == 0:
        await msg.answer(f'–ù–æ–≤–æ—Å—Ç–µ–π –µ—â–µ –Ω–µ –±—ã–ª–æ')
        return
    for i in news:
        # print(i)
        if i[1] == 'ü•∑–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è':
            if user_id in settings.admin_ids:
                await msg.answer(f'–ù–æ–≤–æ—Å—Ç—å –æ—Ç: {i[3]}\n\n{i[2]}', parse_mode=ParseMode.MARKDOWN)
        elif i[1] == 'ü´Ç–°–æ–≤–µ—Ç –ì–∏–º–Ω–∞–∑–∏—Å—Ç–æ–≤':
            if user_id in settings.council_ids or user_id in settings.admin_ids:
                await msg.answer(f'–ù–æ–≤–æ—Å—Ç—å –æ—Ç: {i[3]}\n\n{i[2]}', parse_mode=ParseMode.MARKDOWN)
        elif i[1] == 'üë∏–£—á–∏—Ç–µ–ª—è':
            if user_id in settings.teacher_ids or user_id in settings.admin_ids:
                await msg.answer(f'–ù–æ–≤–æ—Å—Ç—å –æ—Ç: {i[3]}\n\n{i[2]}', parse_mode=ParseMode.MARKDOWN)
        elif i[1] == '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
            if user_id in settings.user_ids:
                await msg.answer(f'–ù–æ–≤–æ—Å—Ç—å –æ—Ç: {i[3]}\n\n{i[2]}', parse_mode=ParseMode.MARKDOWN)

@router.message(Command('help'))
async def handle_help(msg: types.Message):
    if msg.from_user.id in settings.admin_ids:
        await msg.answer(HELP_COMMANDS_MESSAGE_ADMIN, reply_markup=ReplyKeyboardRemove())
        return
    if msg.from_user.id in settings.council_ids:
        await msg.answer(HELP_COMMANDS_MESSAGE_COUNCIL, reply_markup=ReplyKeyboardRemove())
        return
    await msg.answer(HELP_COMMANDS_MESSAGE_USERS, reply_markup=ReplyKeyboardRemove())


@router.message(Command('report'))
async def handle_report(msg: types.Message, state: FSMContext, user_id: int = None):
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã', reply_markup=ReplyKeyboardRemove())
    if user_id is None:
        user_id = msg.from_user.id
    await state.update_data(user_id=user_id)
    await state.update_data(full_name=await get_full_name(user_id))
    await state.set_state(ReportForm.get_text)


@router.message(ReportForm.get_text)
async def handle_get_text(msg: types.Message, state: FSMContext):
    await state.update_data(text=msg.text)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞')
    await state.set_state(ReportForm.get_room)


@router.message(ReportForm.get_room)
async def handle_get_text(msg: types.Message, state: FSMContext):
    await state.update_data(room=msg.text)
    await state.update_data(status='new')
    data = await state.get_data()
    ticket_id = await register_ticket(data)
    for user in settings.admin_ids:
        from src.main import bot
        await bot.send_message(user, f'–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –æ—Ç "{data["full_name"]}"\n\n{data["text"]}\n\n–ö–∞–±–∏–Ω–µ—Ç: {data["room"]}', reply_markup=await completed_or_not(ticket_id=ticket_id))
    await msg.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∂–∞–ª–æ–±—É! –û–Ω–∞ –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –∫—Ä–∞—Ç—á–∞–∏ÃÜ—à–∏–µ —Å—Ä–æ–∫–∏.')
    await state.clear()


@router.message(Command('idea'))
async def handle_idea(msg: types.Message, state: FSMContext, user_id: int = None):
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–¥–µ–∏', reply_markup=ReplyKeyboardRemove())
    if user_id is None:
        user_id = msg.from_user.id
    await state.update_data(user_id=user_id)
    await state.update_data(full_name=await get_full_name(user_id))
    await state.set_state(IdeaForm.get_text)


@router.message(IdeaForm.get_text)
async def handle_get_text(msg: types.Message, state: FSMContext):
    await state.update_data(text=msg.text)
    await msg.answer('–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∏–¥–µ—è –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    data = await state.get_data()
    idea_id = await register_idea(data)
    for user in settings.admin_ids:
        from src.main import bot
        await bot.send_message(user, f'–ù–æ–≤–∞—è –∏–¥–µ—è –æ—Ç "{data["full_name"]}"\nid: {data["user_id"]}\n\n{data["text"]}')
    await state.clear()


@router.message(Command('info'))
async def handle_start(msg: types.Message):
    await msg.answer(INFO_MESSAGE, reply_markup=ReplyKeyboardRemove())
    # settings.student_ids.add({msg.from_user.id, msg.contact.first_name, msg})

# @router.message(Command('help'), F.from_user.id.in_(settings.admin_ids))
# async def handle_start(msg: types.Message):
#     await msg.answer(HELP_COMMANDS_MESSAGE_ADMIN)
